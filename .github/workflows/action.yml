name: Build & Release Chrome Extension

on:
  push:
    branches:
      - main
permissions:
  contents: write

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.check_version.outputs.release }}
      version: ${{ steps.manifest.outputs.version }}
      latest_tag: ${{ steps.latest_release.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq & GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Get version from manifest.json
        id: manifest
        run: |
          VERSION=$(jq -r .version src/manifest.json)
          echo "Extension version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get latest GitHub release version
        id: latest_release
        run: |
          LATEST=$(gh release list --limit 1 --json tagName --jq '.[0].tagName' || echo "none")
          echo "Latest release tag: $LATEST"
          
          BASE_VERSION=$(echo $LATEST | sed -E 's/^v//;s/-auto.*//')
          echo "Base version: $BASE_VERSION"
          echo "latest_version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if version changed
        id: check_version
        run: |
          MANIFEST_VERSION="${{ steps.manifest.outputs.version }}"
          LATEST_VERSION="${{ steps.latest_release.outputs.latest_version }}"

          echo "Manifest version: $MANIFEST_VERSION"
          echo "Latest release version: $LATEST_VERSION"

          if [[ "$LATEST_VERSION" == "none" ]]; then
            echo "No previous release found, creating release."
            echo "release=true" >> $GITHUB_OUTPUT
          elif [[ "$MANIFEST_VERSION" == "$LATEST_VERSION" ]]; then
            echo "Version unchanged, skipping release."
            echo "release=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected."
            echo "release=true" >> $GITHUB_OUTPUT
          fi

  build-release:
    needs: check-version
    if: needs.check-version.outputs.release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Build Chrome Extension
        run: |
          python Tools/build_extension.py

      - name: Zip extension files
        run: |
          cd dist/extension
          zip -r ../../extension.zip .
          cd ../..

      - name: Get commits since last release
        id: commits
        run: |
          LAST_TAG="${{ needs.check-version.outputs.latest_tag }}"
          if [ -z "$LAST_TAG" ] || [ "$LAST_TAG" == "none" ]; then
            echo "No previous tag, listing all commits"
            git --no-pager log --pretty=format:'- %s (%h) by %an' HEAD > /tmp/commits.txt || true
          else
            echo "Listing commits since $LAST_TAG"
            git --no-pager log "${LAST_TAG}..HEAD" --pretty=format:'- %s (%h) by %an' > /tmp/commits.txt || true
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/commits.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ needs.check-version.outputs.version }} - Auto Release - ${{ github.sha }}
          tag_name: v${{ needs.check-version.outputs.version }}-auto-${{ github.sha }}
          body: |
            Changes since last release (tag: ${{ needs.check-version.outputs.latest_tag }}):
            ${{ steps.commits.outputs.commits }}
          files: extension.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
